.chapter(data-title='Subscribing for Notifications')
  .step(data-title='Introduction')
    :markdown
      ## SMS and MMS Marketing Notifications

      Ready to implement SMS and MMS marketing notifications? Here's how it works at a high level:

      1. A user you'd like to reach sends an SMS text message to a Twilio phone number you advertise in print, online or in TV.

      1. Your application confirms that the user wants to receive SMS and MMS notifications.

      1. An administrator or marketing campaign manager uses a web form to craft a message that will go out to all subscribers via SMS/MMS message.

      ## Building Blocks

      To get this done, you'll be working with the following Twilio APIs:

      * [TwiML](http://www.local.twilio.com/docs/api/twiml) and the [&lt;Message&gt; Verb](/docs/api/twiml/sms/message): We'll use TwiML to manage interactions initiated by the user via SMS
      * [Messages Resource](/docs/api/rest/sending-sms): We will use the REST API to broadcast messages out to all subscribers

      Let's get started! Click the right arrow to move on to the next step of the tutorial.

  .step(data-title='Creating a Subscriber', data-file='app/models/subscriber.rb')
    :markdown
      ## Creating a Subscriber

      We begin by generating an [Active Record](http://guides.rubyonrails.org/active_record_basics.html) model that we will store in a postgres database. For our purposes we don't need to store very much information about the subscriber - only their phone number (so we can send them updates) and a boolean flag indicating whether or not they are opted-in to receive updates.

      We'll use the [Rails generate command](http://guides.rubyonrails.org/command_line.html#rails-generate) to create our model:

      ``` bin/rails generate model Subscriber phone_number:string subscribed:boolean ```

      This generator creates our model, migration and schema for us. Now all we need to run is `rake db:migrate` and we have a table of Subscribers.

      Now that we have a model object to save a subscriber, let's move up to the controller level to see how we create one.

  .step(data-title='Handling An Incoming Message', data-file='app/controllers/notifications_controller.rb', data-highlight='')
    :markdown
      ## Handling An Incoming Message

      Since the `incoming` function will be called every time our application receives a message, it has a lot it needs to do. We'll look at how this function works piece by piece as the tutorial continues, but let's focus on the first message a user sends us for now.

  .step(data-title='Creating a New Subscriber', data-file='app/controllers/notifications_controller.rb', data-highlight="3-16")
    :markdown
      ## Creating a New Subscriber

      We begin by getting the user's phone number from the [incoming Twilio request](/docs/api/twiml/sms/twilio_request). Now, we need to find a `Subscriber` model with that phone number (this should be a unique property of the `Subscriber`).

      If there's no subscriber with this phone number, we create one, save it, and respond with a message asking them to text "add" to confirm that they want to receive messages from us.

      We've created a `Subscriber` model to keep track of the people that want to receive our messages, and we have learned how to save them in the database when they text us for the first time.

      Next, let's look at the logic we need to put in place to allow them to manage their subscription status.
.chapter(data-title='Managing Subscriptions')
  .step(data-title='User Story: Managing Subscriptions', data-file='app/controllers/notifications_controller.rb', data-highlight='')
      :markdown
        ## Managing Subscriptions

        We want to provide the user with two SMS commands to manage their subscription status: `add` and `remove`.  These commands will toggle a boolean flag for their `Subscriber` record in the database, and will determine whether or not they receive messages from our marketing campaign. Because we want to respect our users' preferences, we don't opt them in automatically - rather, we have them confirm that they want to receive messages from us first.

        To make this happen, we will need to update the controller logic which handles the incoming text message to do a couple things:

        * If the user is a person already in the database, parse the message they sent to see if it's a command we recognize
        * If it is a `add` or `remove` command, update their subscription status in the database
        * If it is a command we don't recognize, send them a message explaining available commands.

  .step(data-title='Handling the Form Submission', data-file='app/controllers/notifications_controller.rb', data-highlight='28-42')
    :markdown
      ## Handling the Form Submission

      On the server, we grab the message text and image URL from the POST body, then loop through all Subscribers and call a function on our `Subscriber` model to send the message.

      When the messages are on their way, we redirect back to the same web form with a [flash](http://api.rubyonrails.org/classes/ActionDispatch/Flash.html) message containing feedback about the messaging attempt.

      Let's jump into the model now to see how these messages are sent out.

  .step(data-title='Using the Twilio REST Client', data-file='app/models/subscriber.rb', data-highlight='3-14')
    :markdown
      ## Using the Twilio REST Client

      When the model object is loaded, it creates a [Twilio REST API client](http://twilio.github.io/twilio-node) that it can use to send SMS and MMS messages. The client requires your Twilio account credentials (an account SID and auth token), which can be found [in the account portal](/user/account/voice-messaging).

      Next all we need to do is call `messages.create` on the client object in order to send our message. The Twilio Message API call requires a 'From' and 'To' parameter, and either a 'Body' or a 'MediaUrl' attribute (or both).

      These nine lines of code are all you need to send an SMS in Rails.


  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented a an opt-in process and an administrative
      interface to run an SMS and MMS marketing campaign. Now all you need is
      killer content to share with your users via text or MMS.

      If you're a Sinatra developer working with Twilio, you might enjoy these
      other tutorials:

      [**Warm Transfer**](//www.twilio.com/docs/tutorials/walkthrough/warm-transfer/ruby/sinatra)

      With Warm Transfers your agents will have the ability to conference
      in another agent in realtime.

      [**Automated Survey**](//www.twilio.com/docs/tutorials/walkthrough/automated-survey/ruby/sinatra)

      Instantly collect structured data from your users with a survey conducted
      over a voice call or SMS text messages.

      ### Did this help?

      Thanks for checking this tutorial out! If you have any feedback to share
      with us, we'd love to hear it. [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.

.chapter(data-title='Subscribing for Notifications')
  .step(data-title='Introduction')
    :markdown
      ## SMS and MMS Marketing Notifications

      Ready to implement SMS and MMS marketing notifications? Here's how it works at a high level:

      1. A user you'd like to reach sends an SMS text message to a Twilio phone number you advertise in print, online, or in TV advertising

      1. Your application confirms that the user wants to receive SMS and MMS notifications from your application

      1. An administrator or marketing campaign manager uses a web form to craft a message that will go out to all subscribers via SMS/MMS message

      ## Building Blocks

      To get this done, you'll be working with the following Twilio APIs:

      * [TwiML](http://www.local.twilio.com/docs/api/twiml) and the [&lt;Message&gt; Verb](/docs/api/twiml/sms/message): We'll use TwiML to manage interactions initiated by the user via SMS
      * [Messages Resource](/docs/api/rest/sending-sms): We will use the REST API to broadcast messages out to all subscribers

      ## How To Read This Tutorial

      In this tutorial, we will be working through a series of [user stories](http://en.wikipedia.org/wiki/User_story) that describe how to fully implement this Twilio-powered application. Each will describe a major step on the road to implementing this functionality yourself.

      Let's get started! Click the right arrow to move on to the next step of the tutorial.

  .step(data-title='User Story: Subscribe for Updates', data-file='app/models/subscriber.rb')
    h2 User Story: Subscribe for Updates
    blockquote As a User, I would like to sign up via SMS to receive SMS or MMS updates on my phone.
    :markdown
      In order to send out marketing notifications to a user, we need to provide a way for them to opt in to receive updates. We accomplish this by having them send a text message to a Twilio number in our account, and then save their phone number in our database.

      To make this happen, we will need to implement a couple of things:
      * a model object to save information about a `Subscriber`
      * a [Ruby on Rails](http://rubyonrails.org/) web application that can respond to [Twilio webhook requests](/docs/api/twiml/sms/twilio_request) when our number gets an incoming text.

      Let's start by looking at the model for a `Subscriber`.

  .step(data-title='Creating a Subscriber', data-file='app/models/subscriber.rb')
    :markdown
      ## Creating a Subscriber

      We begin by generating an [Active Record](http://guides.rubyonrails.org/active_record_basics.html) model that we will store in a postgres database. For our purposes we don't need to store very much information about the subscriber - just their phone number (so we can send them updates) and a boolean flag indicating whether or not they are opted-in to receive updates.

      We'll use the [Rails generate command](http://guides.rubyonrails.org/command_line.html#rails-generate) to create our model:
      ``` bin/rails generate model Subscriber phone_number:string subscribed:boolean ```

      This generator creates our model, migration and schema for us. Now all we need to run is `rake db:migrate` and we have a table of Subscribers.

      Now that we have a model object to save a subscriber, let's move up to the controller level to see how we create one.

  .step(data-title='Creating a Webhook Route', data-file='config/routes.rb')
    :markdown
      ## Creating a Webhook Route

      In Rails we often generate our routes, but this time we'll define the few we have by hand. When Twilio receives an incoming message, it will send an HTTP POST request to our server.

      Here, we configure all the routes our application will handle, and map those routes to controller functions.

  .step(data-title='Mapping the Webhook to a Route', data-file='config/routes.rb', data-highlight='4-5')
    :markdown
      ## Mapping the Webhook to a Route

      Click on one of your Twilio numbers on the [Manage Phone Numbers](/user/account/phone-numbers/incoming) screen in the account portal. For this number, you will need to configure a public server address for your application, as well as the `/incoming` route which Twilio will POST to when your number gets any incoming messages:

      ![Twilio Number Configuration](//s3.amazonaws.com/howtodocs/marketing-notifications-webhook.png)

      Let's dive into the controller function that will handle incoming messages next.

  .step(data-title='Handling An Incoming Message', data-file='app/controllers/notifications_controller.rb', data-highlight='')
    :markdown
      ## Handling An Incoming Message

      Since the `incoming` function will be called every time our application receives a message, it has a lot it needs to do. We'll look at how this function works piece by piece as the tutorial continues, but let's focus on the first message a user sends us for now.

  .step(data-title='Creating a New Subscriber', data-file='app/controllers/notifications_controller.rb', data-highlight="3-16")
    :markdown
      ## Creating a New Subscriber

      We begin by getting the texter's phone number from the [incoming Twilio request](/docs/api/twiml/sms/twilio_request). Now, we need to find a `Subscriber` model with that phone number (this should be a unique property of the `Subscriber`).

      If there's no subscriber with this phone number, we create one, save it, and respond with a message asking them to text "add" to confirm that they want to receive messages from us.

      And that's all we want at this step! We've created a `Subscriber` model to keep track of the people that want our messages, and saved them in the database when they text us for the first time.

      Next, let's look at the logic we need to put in place to allow them to manage their subscription status.
.chapter(data-title='Managing Subscriptions')
  .step(data-title='User Story: Manage Subscriptions', data-file='app/controllers/notifications_controller.rb', data-highlight='')
      h2 User Story: Manage Subscriptions
      blockquote As a User, I would like to manage my subscription status via text message.
      :markdown
        We want to provide the user with two SMS commands to manage their subscription status: `add` and `remove`.  These commands will toggle a boolean flag for their `Subscriber` record in the database, and will determine whether or not they receive messages from our marketing campaign. Because we're not jerks, we don't opt them in automatically - rather, we have them confirm that they want to receive messages from us first.

        To make this happen, we will need to update the controller logic which handles the incoming text message to do a couple things:

        * If the texter is a person already in the database, parse the message they sent to see if it's a command we recognize
        * If it is a `add` or `remove` command, update their subscription status in the database
        * If it is a command we don't recognize, send them a message explaining available commands.

        Let's go back into our controller function to see how this works.

  .step(data-title='Processing an Incoming Message', data-file='app/controllers/notifications_controller.rb', data-highlight='51-70')
    :markdown
      ## Processing an Incoming Message

      This internal function handles parsing the incoming message from the user and executing conditional logic to see if they have issued us a command we recognize. It's executed after we have already hit the database once to retrieve the current `Subscriber` model.

  .step(data-title='Handling a Subscription Command', data-file='app/controllers/notifications_controller.rb', data-highlight="56-63")
    :markdown
      ## Handling a Subscription Command

      If the user has texted `add` or `remove`, we will update their subscription status in the database. We will then respond to them via SMS with the opposite command to either opt in to updates or opt out.

  .step(data-title='Listing Available Commands', data-file='app/controllers/notifications_controller.rb', data-highlight='64-66')
    :markdown
      ## Listing Available Commands

      If they texted in something we don't recognize, we respond to them with a listing of all known commands. We could take this further and implement "help" text for each command, but in this simple use case the commands should be self-explanatory.

  .step(data-title='Responding with TwiML', data-file='app/controllers/notifications_controller.rb', data-highlight='72-77')
    :markdown
      ## Responding with TwiML

      The Twilio Ruby library includes the handy `TwiML::Response` helper which handles generating a TwiML (XML) response on the fly. Now to close out the interaction with our incoming message we just need to call `respond(output)` at the end of our controller.

      That's it for the user-facing commands! Now, we need to provide our marketing team with an interface to send messages out to all subscribers. Let's take a look at that next.
.chapter(data-title='Sending Messages')
  .step(data-title='User Story: Send SMS or MMS Notifications', data-file="app/models/subscriber.rb")
    h2 User Story: Send SMS or MMS Notifications
    blockquote As an Administrator, I want to be able to send an MMS with a message, and optional picture from a web interface.
    :markdown
      Now that we have a list of subscribers for our awesome SMS and MMS content, we need to provide our marketing team some kind of interface to send out messages.

      To make this happen, we will need to update our application to do a few things:

      * Create a route to render a web form that an administrator can interact with
      * Create a controller function to handle the form submission
      * Use the Twilio API to send out messages to all current subscribers

      Let's begin at the front end with the web form our administrators will interact with.

  .step(data-title='Creating the Web Form', data-file='app/views/notifications/index.html.erb')
    :markdown
      ## Creating the Web Form

      Here we use Jade to render an HTML document containing a web form to be used by our marketing campaign administrators.

      It just has a couple of fields - one to specify a text message, and another to specify an optional URL to an image on the public Internet that we could send via MMS.

      Let's go to the controller next to see what happens when the form is submitted.

  .step(data-title='Handling the Form Submission', data-file='app/controllers/notifications_controller.rb', data-highlight='28-42')
    :markdown
      ## Handling the Form Submission

      On the server, we grab the message text and image URL from the POST body, then loop through all Subscribers and call a function on our `Subscriber` model to send the message.

      When the messages are on their way, we redirect back to the same web form with a [flash](http://api.rubyonrails.org/classes/ActionDispatch/Flash.html) message containing feedback about the messaging attempt.

      Let's jump into the model now to see how these messages are sent out.

  .step(data-title='Using the Twilio REST Client', data-file='app/models/subscriber.rb', data-highlight='3-14')
    :markdown
      ## Using the Twilio REST Client

      When the model object is loaded, it creates a [Twilio REST API client](http://twilio.github.io/twilio-node) that it can use to send SMS and MMS messages. The client requires your Twilio account credentials (an account SID and auth token), which can be found [in the account portal](/user/account/voice-messaging).

      Next all we need to do is call `messages.create` on the client object in order to send our message. The Twilio Message API call requires a 'From' and 'To' parameter, and either a 'Body' or a 'MediaUrl' attribute (or both).

      These nine lines of code are all you need to send an SMS in Rails.

  .step(data-title='All Done!', data-file='app/models/subscriber.rb')
    :markdown
      ## All Done!

      That's it! We've just implemented a an opt-in process and an administrative interface to run an SMS and MMS marketing campaign. Now all you need is killer content to share with your users via text or MMS.

      Thanks for checking out this tutorial! If you have any feedback to share with us, we'd love to hear it. Tweet [@twilio](http://twitter.com/twilio) to let us know what you think.
